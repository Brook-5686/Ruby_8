name: Deploy to Amazon ECS
on:
  push:
    branches:
      - master
      - 'feature/**'

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  # ECR_REPOSITORY: shared-advanceph.app.ecr         # set this to your Amazon ECR repository name
  # ECS_SERVICE: staging-advancetechph-service                 # set this to your Amazon ECS service name
  # ECS_CLUSTER: staging-advancetechph-cluster                 # set this to your Amazon ECS cluster name

  CONTAINER_NAME: advancetechph           # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    environment:
        name: shared
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      sample: ${{ steps.sample.outputs.sample }}
      sample1: ${{ steps.sample.outputs.sample1 }}
      repo: ${{ steps.login-ecr.outputs.registry }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Look S3
        run: |
          aws s3 ls

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          # docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker pull $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
          # docker tag $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
          docker tag $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          # docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
          echo "::set-output name=image::${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG"
          echo $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

      - name: Sample
        id: sample
        run: |
          echo "::set-output name=sample::sample123image"
          echo "::set-output name=sample1::sample321image"

      - name: Step 1 - Echo out a GitHub Actions Secret to the logs
        run: |
          echo "The GitHub Action Secret will be masked:  "
          echo ${{ secrets.ECR_REPOSITORY }}
          echo "Trick to echo GitHub Actions Secret:  "
          echo ${{secrets.ECR_REPOSITORY}} | sed 's/./& /g' 

  deploy:
    needs: build
    name: Deploy to staging
    environment:
        name: staging
        # url: ${{ steps.deploy_staging.outputs.webapp-url }}
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Look S3
        run: |
          aws s3 ls

      - name: Print Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "this is test "
          echo $ECR_REGISTRY
          echo $ECR_REPOSITORY
          echo $IMAGE_TAG
          echo ${{ needs.build.outputs.image }}
          echo ${{ needs.build.outputs.sample }}
          echo ${{ needs.build.outputs.repo }}
          echo ${{ needs.build.outputs.sample1 }}
          echo ${{ needs.build.outputs.task-def }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition staging-advancetechph-task-family --query taskDefinition > task-definition.json

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.CONTAINER_NAME }}
      #     image: ${{ needs.build.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.ECS_SERVICE }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      #     wait-for-service-stability: true
